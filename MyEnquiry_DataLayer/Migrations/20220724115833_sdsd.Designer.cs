// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MyEnquiry_DataLayer.Models;

namespace MyEnquiry_DataLayer.Migrations
{
    [DbContext(typeof(MyAppContext))]
    [Migration("20220724115833_sdsd")]
    partial class sdsd
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:Collation", "Arabic_CI_AS")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.8")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("MyEnquiry_DataLayer.Models.Answers", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Answer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("NumberofPhoto")
                        .HasColumnType("int");

                    b.Property<int?>("NumberofWords")
                        .HasColumnType("int");

                    b.Property<int?>("QuestionId")
                        .HasColumnType("int");

                    b.Property<int?>("SelectBox")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.ToTable("Answers");
                });

            modelBuilder.Entity("MyEnquiry_DataLayer.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AddressDetails")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("BankId")
                        .HasColumnType("int");

                    b.Property<bool>("Blocked")
                        .HasColumnType("bit");

                    b.Property<string>("CashNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CompanyId")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("DeviceToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DeviceType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Education")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("FromDash")
                        .HasColumnType("bit");

                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NationalId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<int?>("ReferId")
                        .HasColumnType("int");

                    b.Property<bool>("Reviewr")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserIdApp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserImg")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int>("UserType")
                        .HasColumnType("int");

                    b.Property<int?>("VerificationCode")
                        .HasColumnType("int");

                    b.Property<int?>("cityId")
                        .HasColumnType("int");

                    b.Property<float?>("lat")
                        .HasColumnType("real");

                    b.Property<float?>("lng")
                        .HasColumnType("real");

                    b.Property<float?>("price")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("BankId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("ReferId");

                    b.HasIndex("cityId");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("MyEnquiry_DataLayer.Models.BankCompany", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("BanksId")
                        .HasColumnType("int");

                    b.Property<int>("CaseTypesId")
                        .HasColumnType("int");

                    b.Property<int>("CitiesId")
                        .HasColumnType("int");

                    b.Property<int>("CompaniesId")
                        .HasColumnType("int");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<float?>("PriceCase")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("BanksId");

                    b.HasIndex("CaseTypesId");

                    b.HasIndex("CitiesId");

                    b.HasIndex("CompaniesId");

                    b.ToTable("BankCompany");
                });

            modelBuilder.Entity("MyEnquiry_DataLayer.Models.BankCompany2", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("BanksId")
                        .HasColumnType("int");

                    b.Property<int>("CaseTypesId")
                        .HasColumnType("int");

                    b.Property<int>("CitiesId")
                        .HasColumnType("int");

                    b.Property<int>("CompaniesId")
                        .HasColumnType("int");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<float?>("PriceCase")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("BanksId");

                    b.HasIndex("CaseTypesId");

                    b.HasIndex("CitiesId");

                    b.HasIndex("CompaniesId");

                    b.ToTable("BankCompany2");
                });

            modelBuilder.Entity("MyEnquiry_DataLayer.Models.Banks", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("Logo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameEn")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Banks");
                });

            modelBuilder.Entity("MyEnquiry_DataLayer.Models.CaseFiles", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CaseId")
                        .HasColumnType("int");

                    b.Property<string>("ExcelSheet")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CaseId");

                    b.ToTable("CaseFiles");
                });

            modelBuilder.Entity("MyEnquiry_DataLayer.Models.CaseFormAnswers", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Answer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("AnswerId")
                        .HasColumnType("int");

                    b.Property<int>("CaseId")
                        .HasColumnType("int");

                    b.Property<int?>("CasesTypeFormsId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AnswerId");

                    b.HasIndex("CaseId");

                    b.HasIndex("CasesTypeFormsId");

                    b.ToTable("CaseFormAnswers");
                });

            modelBuilder.Entity("MyEnquiry_DataLayer.Models.CaseStatus", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("NameAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameEn")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("CaseStatus");
                });

            modelBuilder.Entity("MyEnquiry_DataLayer.Models.CaseTypes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("NameAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Word")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("CaseTypes");
                });

            modelBuilder.Entity("MyEnquiry_DataLayer.Models.Cases", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("BankId")
                        .HasColumnType("int");

                    b.Property<int>("CaseStatusId")
                        .HasColumnType("int");

                    b.Property<int>("CaseTypeId")
                        .HasColumnType("int");

                    b.Property<string>("ClientName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClientNumbers")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("DoneFromBank")
                        .HasColumnType("datetime2");

                    b.Property<string>("EnquirerName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HomeAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HomeGovernorate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NationalId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PaidFromBank")
                        .HasColumnType("bit");

                    b.Property<bool>("PaidFromCompany")
                        .HasColumnType("bit");

                    b.Property<string>("RejectResion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReviewerId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("SuperVisorId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("WorkAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WorkGovernorate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("lat")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("lng")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BankId");

                    b.HasIndex("CaseStatusId");

                    b.HasIndex("CaseTypeId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("ReviewerId");

                    b.HasIndex("SuperVisorId");

                    b.ToTable("Cases");
                });

            modelBuilder.Entity("MyEnquiry_DataLayer.Models.CasesOrders", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CaseId")
                        .HasColumnType("int");

                    b.Property<decimal?>("Lat")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("Lng")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CaseId");

                    b.HasIndex("UserId");

                    b.ToTable("CasesOrders");
                });

            modelBuilder.Entity("MyEnquiry_DataLayer.Models.CasesTypeForms", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CaseTypeId")
                        .HasColumnType("int");

                    b.Property<bool>("HasFile")
                        .HasColumnType("bit");

                    b.Property<string>("Question")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CaseTypeId");

                    b.ToTable("CasesTypeForms");
                });

            modelBuilder.Entity("MyEnquiry_DataLayer.Models.Cities", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("NameAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameEn")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Cities");
                });

            modelBuilder.Entity("MyEnquiry_DataLayer.Models.Companies", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("Logo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameEn")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Companies");
                });

            modelBuilder.Entity("MyEnquiry_DataLayer.Models.Complaint", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("userId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("userId");

                    b.ToTable("Complaint");
                });

            modelBuilder.Entity("MyEnquiry_DataLayer.Models.CoverageArea", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("RegionId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RegionId");

                    b.HasIndex("UserId");

                    b.ToTable("CoverageArea");
                });

            modelBuilder.Entity("MyEnquiry_DataLayer.Models.FormAnswersFiles", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CaseFormAnsweId")
                        .HasColumnType("int");

                    b.Property<string>("Url")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CaseFormAnsweId");

                    b.ToTable("FormAnswersFiles");
                });

            modelBuilder.Entity("MyEnquiry_DataLayer.Models.Helps", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Arabic")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("English")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Helps");
                });

            modelBuilder.Entity("MyEnquiry_DataLayer.Models.Notifications", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("FromId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ToId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("FromId");

                    b.HasIndex("ToId");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("MyEnquiry_DataLayer.Models.OrderFiles", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("FromType")
                        .HasColumnType("int");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<string>("Url")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.ToTable("OrderFiles");
                });

            modelBuilder.Entity("MyEnquiry_DataLayer.Models.OrderReview", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("Rate")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.ToTable("OrderReview");
                });

            modelBuilder.Entity("MyEnquiry_DataLayer.Models.PermissionPages", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ActionName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AreaName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ControllerName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Icon")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PageId")
                        .HasColumnType("int");

                    b.Property<string>("PageName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ParentId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("PermissionPages");
                });

            modelBuilder.Entity("MyEnquiry_DataLayer.Models.PermissionPagesRoles", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("PageId")
                        .HasColumnType("int");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("PageId");

                    b.HasIndex("RoleId");

                    b.ToTable("PermissionPagesRoles");
                });

            modelBuilder.Entity("MyEnquiry_DataLayer.Models.Privacy", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Arabic")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("English")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Privacy");
                });

            modelBuilder.Entity("MyEnquiry_DataLayer.Models.Questions", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CaseTypeId")
                        .HasColumnType("int");

                    b.Property<bool>("HasFile")
                        .HasColumnType("bit");

                    b.Property<string>("Question")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("choice")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("CaseTypeId");

                    b.ToTable("Questions");
                });

            modelBuilder.Entity("MyEnquiry_DataLayer.Models.RefusedCases", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BankId")
                        .HasColumnType("int");

                    b.Property<int>("CaseNumber")
                        .HasColumnType("int");

                    b.Property<string>("Resoan")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Solved")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("RefusedCases");
                });

            modelBuilder.Entity("MyEnquiry_DataLayer.Models.Regions", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<int?>("CitiesId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("NameAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameEn")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CitiesId");

                    b.ToTable("Regions");
                });

            modelBuilder.Entity("MyEnquiry_DataLayer.Models.SurveyForm", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("BankId")
                        .HasColumnType("int");

                    b.Property<int?>("CaseTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsAcceptingResponses")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("LinkIdentifier")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Logo1Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Logo1Url")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Logo2Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Logo2Url")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BankId");

                    b.HasIndex("CaseTypeId");

                    b.ToTable("SurveyForms");
                });

            modelBuilder.Entity("MyEnquiry_DataLayer.Models.SurveyFormElement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CheckBoxText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FileAcceptedFileExtensions")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("FileNumberOfMaximumFilesAllowed")
                        .HasColumnType("int");

                    b.Property<int?>("FileNumberOfMinimumFilesAllowed")
                        .HasColumnType("int");

                    b.Property<bool>("IsCheckbox")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDate")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsFile")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRadioButton")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRequired")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSelect")
                        .HasColumnType("bit");

                    b.Property<bool>("IsTextarea")
                        .HasColumnType("bit");

                    b.Property<bool>("IsTextbox")
                        .HasColumnType("bit");

                    b.Property<bool>("IsTextboxEmail")
                        .HasColumnType("bit");

                    b.Property<bool>("IsTextboxNumber")
                        .HasColumnType("bit");

                    b.Property<bool>("IsTextboxPassword")
                        .HasColumnType("bit");

                    b.Property<string>("Label")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<string>("SelectBoxOptionText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SurveyFormId")
                        .HasColumnType("int");

                    b.Property<int?>("TextareaMaxLength")
                        .HasColumnType("int");

                    b.Property<int?>("TextareaMinLength")
                        .HasColumnType("int");

                    b.Property<int?>("TextboxMaxLength")
                        .HasColumnType("int");

                    b.Property<int?>("TextboxMinLength")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SurveyFormId");

                    b.ToTable("SurveyFormElements");
                });

            modelBuilder.Entity("MyEnquiry_DataLayer.Models.SurveyFormElementItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("SurveyFormElementId")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("SurveyFormElementId");

                    b.ToTable("SurveyFormElementItems");
                });

            modelBuilder.Entity("MyEnquiry_DataLayer.Models.SurveyFormResponse", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CaseId")
                        .HasColumnType("int");

                    b.Property<int?>("CompanyId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("FileUrls")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("GroupId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsFile")
                        .HasColumnType("bit");

                    b.Property<string>("Result")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SurveyFormElementId")
                        .HasColumnType("int");

                    b.Property<int>("SurveyFormId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CaseId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("SurveyFormElementId");

                    b.HasIndex("SurveyFormId");

                    b.HasIndex("UserId");

                    b.ToTable("SurveyFormResponses");
                });

            modelBuilder.Entity("MyEnquiry_DataLayer.Models.UserMedia", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("url")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserMedia");
                });

            modelBuilder.Entity("MyEnquiry_DataLayer.Models.UserRefer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RelationShip")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("UserRefer");
                });

            modelBuilder.Entity("MyEnquiry_DataLayer.Models.UserWallet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("CaseId")
                        .HasColumnType("int");

                    b.Property<bool>("Paid")
                        .HasColumnType("bit");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CaseId");

                    b.HasIndex("UserId");

                    b.ToTable("UserWallet");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("MyEnquiry_DataLayer.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("MyEnquiry_DataLayer.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyEnquiry_DataLayer.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("MyEnquiry_DataLayer.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MyEnquiry_DataLayer.Models.Answers", b =>
                {
                    b.HasOne("MyEnquiry_DataLayer.Models.Questions", "Questions")
                        .WithMany("Answers")
                        .HasForeignKey("QuestionId");

                    b.Navigation("Questions");
                });

            modelBuilder.Entity("MyEnquiry_DataLayer.Models.ApplicationUser", b =>
                {
                    b.HasOne("MyEnquiry_DataLayer.Models.Banks", "Bank")
                        .WithMany("Users")
                        .HasForeignKey("BankId");

                    b.HasOne("MyEnquiry_DataLayer.Models.Companies", "Company")
                        .WithMany("Users")
                        .HasForeignKey("CompanyId");

                    b.HasOne("MyEnquiry_DataLayer.Models.UserRefer", "UserRefer")
                        .WithMany()
                        .HasForeignKey("ReferId");

                    b.HasOne("MyEnquiry_DataLayer.Models.Cities", "city")
                        .WithMany()
                        .HasForeignKey("cityId");

                    b.Navigation("Bank");

                    b.Navigation("city");

                    b.Navigation("Company");

                    b.Navigation("UserRefer");
                });

            modelBuilder.Entity("MyEnquiry_DataLayer.Models.BankCompany", b =>
                {
                    b.HasOne("MyEnquiry_DataLayer.Models.Banks", "Banks")
                        .WithMany()
                        .HasForeignKey("BanksId");

                    b.HasOne("MyEnquiry_DataLayer.Models.CaseTypes", "CaseTypes")
                        .WithMany()
                        .HasForeignKey("CaseTypesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyEnquiry_DataLayer.Models.Cities", "Cities")
                        .WithMany()
                        .HasForeignKey("CitiesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyEnquiry_DataLayer.Models.Companies", "Companies")
                        .WithMany()
                        .HasForeignKey("CompaniesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Banks");

                    b.Navigation("CaseTypes");

                    b.Navigation("Cities");

                    b.Navigation("Companies");
                });

            modelBuilder.Entity("MyEnquiry_DataLayer.Models.BankCompany2", b =>
                {
                    b.HasOne("MyEnquiry_DataLayer.Models.Banks", "Banks")
                        .WithMany()
                        .HasForeignKey("BanksId");

                    b.HasOne("MyEnquiry_DataLayer.Models.CaseTypes", "CaseTypes")
                        .WithMany()
                        .HasForeignKey("CaseTypesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyEnquiry_DataLayer.Models.Cities", "Cities")
                        .WithMany()
                        .HasForeignKey("CitiesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyEnquiry_DataLayer.Models.Companies", "Companies")
                        .WithMany()
                        .HasForeignKey("CompaniesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Banks");

                    b.Navigation("CaseTypes");

                    b.Navigation("Cities");

                    b.Navigation("Companies");
                });

            modelBuilder.Entity("MyEnquiry_DataLayer.Models.CaseFiles", b =>
                {
                    b.HasOne("MyEnquiry_DataLayer.Models.Cases", "Case")
                        .WithMany("CaseFiles")
                        .HasForeignKey("CaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Case");
                });

            modelBuilder.Entity("MyEnquiry_DataLayer.Models.CaseFormAnswers", b =>
                {
                    b.HasOne("MyEnquiry_DataLayer.Models.Answers", "Answers")
                        .WithMany()
                        .HasForeignKey("AnswerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyEnquiry_DataLayer.Models.Cases", "Cases")
                        .WithMany("CaseFormAnswers")
                        .HasForeignKey("CaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyEnquiry_DataLayer.Models.CasesTypeForms", null)
                        .WithMany("CaseFormAnswers")
                        .HasForeignKey("CasesTypeFormsId");

                    b.Navigation("Answers");

                    b.Navigation("Cases");
                });

            modelBuilder.Entity("MyEnquiry_DataLayer.Models.Cases", b =>
                {
                    b.HasOne("MyEnquiry_DataLayer.Models.Banks", "Bank")
                        .WithMany()
                        .HasForeignKey("BankId");

                    b.HasOne("MyEnquiry_DataLayer.Models.CaseStatus", "CaseStatus")
                        .WithMany()
                        .HasForeignKey("CaseStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyEnquiry_DataLayer.Models.CaseTypes", "CaseType")
                        .WithMany()
                        .HasForeignKey("CaseTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyEnquiry_DataLayer.Models.Companies", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyEnquiry_DataLayer.Models.ApplicationUser", "Reviewer")
                        .WithMany()
                        .HasForeignKey("ReviewerId");

                    b.HasOne("MyEnquiry_DataLayer.Models.ApplicationUser", "SuperVisor")
                        .WithMany()
                        .HasForeignKey("SuperVisorId");

                    b.Navigation("Bank");

                    b.Navigation("CaseStatus");

                    b.Navigation("CaseType");

                    b.Navigation("Company");

                    b.Navigation("Reviewer");

                    b.Navigation("SuperVisor");
                });

            modelBuilder.Entity("MyEnquiry_DataLayer.Models.CasesOrders", b =>
                {
                    b.HasOne("MyEnquiry_DataLayer.Models.Cases", "Cases")
                        .WithMany("CasesOrders")
                        .HasForeignKey("CaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyEnquiry_DataLayer.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("Cases");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MyEnquiry_DataLayer.Models.CasesTypeForms", b =>
                {
                    b.HasOne("MyEnquiry_DataLayer.Models.CaseTypes", "CaseType")
                        .WithMany()
                        .HasForeignKey("CaseTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CaseType");
                });

            modelBuilder.Entity("MyEnquiry_DataLayer.Models.Complaint", b =>
                {
                    b.HasOne("MyEnquiry_DataLayer.Models.ApplicationUser", "user")
                        .WithMany()
                        .HasForeignKey("userId");

                    b.Navigation("user");
                });

            modelBuilder.Entity("MyEnquiry_DataLayer.Models.CoverageArea", b =>
                {
                    b.HasOne("MyEnquiry_DataLayer.Models.Regions", "Region")
                        .WithMany()
                        .HasForeignKey("RegionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyEnquiry_DataLayer.Models.ApplicationUser", "User")
                        .WithMany("CoverageArea")
                        .HasForeignKey("UserId");

                    b.Navigation("Region");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MyEnquiry_DataLayer.Models.FormAnswersFiles", b =>
                {
                    b.HasOne("MyEnquiry_DataLayer.Models.CaseFormAnswers", "CaseFormAnswers")
                        .WithMany("FormAnswersFiles")
                        .HasForeignKey("CaseFormAnsweId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CaseFormAnswers");
                });

            modelBuilder.Entity("MyEnquiry_DataLayer.Models.Notifications", b =>
                {
                    b.HasOne("MyEnquiry_DataLayer.Models.ApplicationUser", "From")
                        .WithMany()
                        .HasForeignKey("FromId");

                    b.HasOne("MyEnquiry_DataLayer.Models.ApplicationUser", "To")
                        .WithMany()
                        .HasForeignKey("ToId");

                    b.Navigation("From");

                    b.Navigation("To");
                });

            modelBuilder.Entity("MyEnquiry_DataLayer.Models.OrderFiles", b =>
                {
                    b.HasOne("MyEnquiry_DataLayer.Models.CasesOrders", "Order")
                        .WithMany("OrderFiles")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");
                });

            modelBuilder.Entity("MyEnquiry_DataLayer.Models.OrderReview", b =>
                {
                    b.HasOne("MyEnquiry_DataLayer.Models.CasesOrders", "Order")
                        .WithMany("OrderReview")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");
                });

            modelBuilder.Entity("MyEnquiry_DataLayer.Models.PermissionPagesRoles", b =>
                {
                    b.HasOne("MyEnquiry_DataLayer.Models.PermissionPages", "Page")
                        .WithMany()
                        .HasForeignKey("PageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId");

                    b.Navigation("Page");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("MyEnquiry_DataLayer.Models.Questions", b =>
                {
                    b.HasOne("MyEnquiry_DataLayer.Models.CaseTypes", "CaseTypes")
                        .WithMany()
                        .HasForeignKey("CaseTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CaseTypes");
                });

            modelBuilder.Entity("MyEnquiry_DataLayer.Models.Regions", b =>
                {
                    b.HasOne("MyEnquiry_DataLayer.Models.Cities", "Cities")
                        .WithMany()
                        .HasForeignKey("CitiesId");

                    b.Navigation("Cities");
                });

            modelBuilder.Entity("MyEnquiry_DataLayer.Models.SurveyForm", b =>
                {
                    b.HasOne("MyEnquiry_DataLayer.Models.Banks", "Bank")
                        .WithMany("SurveyForms")
                        .HasForeignKey("BankId");

                    b.HasOne("MyEnquiry_DataLayer.Models.CaseTypes", "CaseType")
                        .WithMany("SurveyForms")
                        .HasForeignKey("CaseTypeId");

                    b.Navigation("Bank");

                    b.Navigation("CaseType");
                });

            modelBuilder.Entity("MyEnquiry_DataLayer.Models.SurveyFormElement", b =>
                {
                    b.HasOne("MyEnquiry_DataLayer.Models.SurveyForm", "SurveyForm")
                        .WithMany("Elements")
                        .HasForeignKey("SurveyFormId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SurveyForm");
                });

            modelBuilder.Entity("MyEnquiry_DataLayer.Models.SurveyFormElementItem", b =>
                {
                    b.HasOne("MyEnquiry_DataLayer.Models.SurveyFormElement", "SurveyFormElement")
                        .WithMany("Items")
                        .HasForeignKey("SurveyFormElementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SurveyFormElement");
                });

            modelBuilder.Entity("MyEnquiry_DataLayer.Models.SurveyFormResponse", b =>
                {
                    b.HasOne("MyEnquiry_DataLayer.Models.Cases", "Cases")
                        .WithMany()
                        .HasForeignKey("CaseId");

                    b.HasOne("MyEnquiry_DataLayer.Models.Companies", "Company")
                        .WithMany("SurveyFormResponses")
                        .HasForeignKey("CompanyId");

                    b.HasOne("MyEnquiry_DataLayer.Models.SurveyFormElement", "SurveyFormElement")
                        .WithMany("Responses")
                        .HasForeignKey("SurveyFormElementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyEnquiry_DataLayer.Models.SurveyForm", "SurveyForm")
                        .WithMany("Responses")
                        .HasForeignKey("SurveyFormId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyEnquiry_DataLayer.Models.ApplicationUser", "User")
                        .WithMany("SurveyFormResponses")
                        .HasForeignKey("UserId");

                    b.Navigation("Cases");

                    b.Navigation("Company");

                    b.Navigation("SurveyForm");

                    b.Navigation("SurveyFormElement");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MyEnquiry_DataLayer.Models.UserMedia", b =>
                {
                    b.HasOne("MyEnquiry_DataLayer.Models.ApplicationUser", "User")
                        .WithMany("UserMedia")
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MyEnquiry_DataLayer.Models.UserWallet", b =>
                {
                    b.HasOne("MyEnquiry_DataLayer.Models.Cases", "Case")
                        .WithMany()
                        .HasForeignKey("CaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyEnquiry_DataLayer.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("Case");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MyEnquiry_DataLayer.Models.ApplicationUser", b =>
                {
                    b.Navigation("CoverageArea");

                    b.Navigation("SurveyFormResponses");

                    b.Navigation("UserMedia");
                });

            modelBuilder.Entity("MyEnquiry_DataLayer.Models.Banks", b =>
                {
                    b.Navigation("SurveyForms");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("MyEnquiry_DataLayer.Models.CaseFormAnswers", b =>
                {
                    b.Navigation("FormAnswersFiles");
                });

            modelBuilder.Entity("MyEnquiry_DataLayer.Models.CaseTypes", b =>
                {
                    b.Navigation("SurveyForms");
                });

            modelBuilder.Entity("MyEnquiry_DataLayer.Models.Cases", b =>
                {
                    b.Navigation("CaseFiles");

                    b.Navigation("CaseFormAnswers");

                    b.Navigation("CasesOrders");
                });

            modelBuilder.Entity("MyEnquiry_DataLayer.Models.CasesOrders", b =>
                {
                    b.Navigation("OrderFiles");

                    b.Navigation("OrderReview");
                });

            modelBuilder.Entity("MyEnquiry_DataLayer.Models.CasesTypeForms", b =>
                {
                    b.Navigation("CaseFormAnswers");
                });

            modelBuilder.Entity("MyEnquiry_DataLayer.Models.Companies", b =>
                {
                    b.Navigation("SurveyFormResponses");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("MyEnquiry_DataLayer.Models.Questions", b =>
                {
                    b.Navigation("Answers");
                });

            modelBuilder.Entity("MyEnquiry_DataLayer.Models.SurveyForm", b =>
                {
                    b.Navigation("Elements");

                    b.Navigation("Responses");
                });

            modelBuilder.Entity("MyEnquiry_DataLayer.Models.SurveyFormElement", b =>
                {
                    b.Navigation("Items");

                    b.Navigation("Responses");
                });
#pragma warning restore 612, 618
        }
    }
}
